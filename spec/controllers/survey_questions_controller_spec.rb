require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe SurveyQuestionsController, type: :controller do
  include_context 'authenticated'

  # This should return the minimal set of attributes required to create a valid
  # SurveyQuestion. As you add validations to SurveyQuestion, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    attributes_for(:survey_question)
  }

  let(:invalid_attributes) {
    { title: '' }
  }

  let(:survey_template) { create(:survey_template) }
  let!(:survey_question) { create(:survey_question, survey_template: survey_template) }

  before(:each) do
    current_user.add_role :admin, survey_template.organization
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # SurveyQuestionsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "POST #create" do
    context "with valid params" do
      it "creates a new SurveyQuestion" do
        expect {
          post :create, {:survey_template_id => survey_template.to_param, :survey_question => valid_attributes, :format => 'json'}, valid_session
        }.to change(SurveyQuestion, :count).by(1)
      end

      it "assigns a newly created survey_question as @survey_question" do
        post :create, {:survey_template_id => survey_template.to_param, :survey_question => valid_attributes, :format => 'json'}, valid_session
        expect(assigns(:survey_question)).to be_a(SurveyQuestion)
        expect(assigns(:survey_question)).to be_persisted
      end

      it "returns a 201" do
        post :create, {:survey_template_id => survey_template.to_param, :survey_question => valid_attributes, :format => 'json'}, valid_session
        expect(response.status).to eq(201)
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved survey_question as @survey_question" do
        post :create, {:survey_template_id => survey_template.to_param, :survey_question => invalid_attributes, :format => 'json'}, valid_session
        expect(assigns(:survey_question)).to be_a_new(SurveyQuestion)
      end

      it "responds with a 422" do
        post :create, {:survey_template_id => survey_template.to_param, :survey_question => invalid_attributes, :format => 'json'}, valid_session
        expect(response.status).to eq(422)
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        attributes_for(:survey_question)
      }

      it "updates the requested survey_question" do
        put :update, {:id => survey_question.to_param, :survey_question => new_attributes, :format => 'json'}, valid_session

        survey_question.reload
        expect(survey_question.text).to eq(new_attributes[:text])
      end

      it "assigns the requested survey_question as @survey_question" do
        put :update, {:id => survey_question.to_param, :survey_question => valid_attributes, :format => 'json'}, valid_session
        expect(assigns(:survey_question)).to eq(survey_question)
      end

      it "responds with a 200" do
        put :update, {:id => survey_question.to_param, :survey_question => valid_attributes, :format => 'json'}, valid_session
        expect(response.status).to eq(200)
      end
    end

    context "with invalid params" do
      it "assigns the survey_question as @survey_question" do
        put :update, {:id => survey_question.to_param, :survey_question => invalid_attributes, :format => 'json'}, valid_session
        expect(assigns(:survey_question)).to eq(survey_question)
      end

      it "responds with a 422" do
        put :update, {:id => survey_question.to_param, :survey_question => invalid_attributes, :format => 'json'}, valid_session
        expect(response.status).to eq(422)
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested survey_question" do
      expect {
        delete :destroy, {:id => survey_question.to_param, :format => 'json'}, valid_session
      }.to change(SurveyQuestion, :count).by(-1)
    end

    it "responds with a 204" do
      delete :destroy, {:id => survey_question.to_param, :format => 'json'}, valid_session
      expect(response.status).to eq(204)
    end
  end

end
